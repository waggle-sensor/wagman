- look in /usr/share/arduino/hardware/arduino/boards.txt for "Arduino Micro"
- note value of "high_fuses"
- look in Atmel datasheet for "BOOTSZ0" and "BOOTSZ1" and what the "high_fuses" value means for bootloader size
- Example:
-- "high_fuses" values is 0xD8, meaning BOOTSZ0 and BOOTSZ1 are zero
-- according to "Boot Loader Parameters" from the datasheet, this means the bootloader section takes up 2048 words of the flash memory (word address: 0x3800 - 0x3FFF) (byte address: 0x7000 - 0x7FFF)
-- program space is from 0x0000 - 0x6FFF (byte address)


- sudo apt-get install srecord
- turn on "verbose" compilation output in Arduino IDE
- click "verify"
- click "verify" again if this is the first compilation with the "verbose" setting (it'll make it much easier to find the desired dir)
- find temp directory where Arduino dumps the intermediate files
- go to that dir
- for ATmega32U:
-- might need sudo
-- srec_cat SysMon.cpp.hex -intel --fill 0xFF 0x0000 <end address - 4> --l-e-crc32 <end address - 3> -o SysMon.cpp.hex -intel
--- example above: srec_cat SysMon.cpp.hex -intel --fill 0xFF 0x0000 0x6FFB --l-e-crc32 0x6FFC -o SysMon.cpp.hex -intel
---- this is for the application space
-- srecord uses CCITT polynomials by default (see SRecord Reference Manual for more info)

- app code should calc crc32 from flash addresses 0x0000 - <end address - 4> and compare that to the value stored at <end address - 3> - <end address>




- avrdude verifies the flash when it uploads.  is it unreasonable to create a checksum on the first run of new firmware, then compare to that on subsequent boots?
